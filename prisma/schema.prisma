// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = []
}

datasource db {
  provider     = "mysql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id          String     @id @default(uuid())
  title       String
  // animal      Animal?    @relation("AnimalPosts", fields: [animalId], references: [id])
  //animalId    Int?
  animal      String?
  breed       String?
  lastSeen    DateTime?
  createdAt   DateTime   @default(now())
  age         String?
  location    String
  localidad   Localidad? @relation("LocalidadPost", fields: [localidadId], references: [id])
  localidadId Int?
  lat         Decimal?
  lng         Decimal?
  description String?
  contact     String?
  image       String?
  author      String?

  //@@index([animalId])
  @@index([localidadId])
}

model forumPost {
  id          String  @id @default(uuid())
  title       String?
  type        String?
  description String?
  author      String?
}

//Tablas de animales

model Animal {
  id      Int    @id @default(autoincrement())
  name    String @unique
  breed   Breed? @relation("AnimalBreed", fields: [breedId], references: [id])
  breedId Int?
  //posts   Post[] @relation("AnimalPosts")

  @@index([breedId])
}

model Breed {
  id     Int      @id @default(autoincrement())
  name   String
  speed  String?
  animal Animal[] @relation("AnimalBreed")
}

//Localizaciones

model Provincia {
  id       Int      @id @default(autoincrement())
  name     String   @unique
  Ciudades Ciudad[] @relation("CiudadEnProvincia")
}

model Ciudad {
  id          Int         @id @default(autoincrement())
  name        String
  provincia   Provincia   @relation("CiudadEnProvincia", fields: [provinciaId], references: [id])
  provinciaId Int
  Localidades Localidad[] @relation("LocalidadEnCiudad")

  @@index([provinciaId])
}

model Localidad {
  id       Int    @id @default(autoincrement())
  name     String
  ciudad   Ciudad @relation("LocalidadEnCiudad", fields: [ciudadId], references: [id])
  ciudadId Int
  posts    Post[] @relation("LocalidadPost")

  @@index([ciudadId])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String?
  providerAccountId String?
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  surName       String?
  password      String?
  dni           Int?      @unique
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(BASIC)

  accounts         Account[]
  sessions         Session[]
  // posts            Post[]          @relation("PostsUsuarios")
  userPreference   UserPreference? @relation(fields: [userPreferenceId], references: [id])
  userPreferenceId String?         @unique

  @@unique([email, password])
  @@index([email])
  @@index([userPreferenceId])
}

model UserPreference {
  id           String  @id @default(uuid())
  emailUpdates Boolean
  user         User?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  BASIC
  EDITOR
  ADMIN
}
